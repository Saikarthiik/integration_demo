to launchURL
	set browser to "Chrome"
	set url to universal testData.SC2ApplicationURL
	set universal pageWait to 60   #softWait
	try
		log "Opening " & url & " using " & browser
		click [20,200]
		set universal browser to browser
		typetext windowskey,"r"
		wait 0.6
		waitfor universal pageWait, text:"Type the",searchRectangle:(screenPartition().SUT.("BLQ"))
		typetext browser&&url
		wait 0.5
		typetext returnkey
		waitfor universal pageWait,"icons/refresh"
		click [20,200]
		typetext windowskey, upArrow
		
		"SC2_CommonActions/sc2CommonHandlers".ClearCache
		completeScreenLoad
		typetext controlKey,l,Return
		pageLoad
		--typetext windowskey, downArrow
		--pageLoad
	Catch theException
		smartUtil.errorCapture theException
	End try
end launchURL

to openRunWindowAndEnterText testData, input
	
	typetext windowskey,"r"
	TypeText backspace
	wait 0.6
	waitfor universal pageWait, text:"Type the",searchRectangle:(screenPartition().SUT.("BLQ"))
	typetext testData
	wait 0.5
	typetext returnkey
	wait 0.5
	TypeText windowsKey,upArrow
	validate input,"LH"
	
end openRunWindowAndEnterText

to closeBrowser

	--set the ScriptLogging to OFF
	try
		if ImageFound(text:"File name", waitFor:5) then
			click FoundImageLocation()
			wait 2
			typetext altkey,F,C
		end if
		set the SearchRectangle to []
		log "Close browser shortcut"
		repeat 3 times
			click [20,300]
			typetext controlkey,shiftkey,"w"
			wait 2
		end repeat
		if universal testCaseName is not empty then
			EndTestCase universal testCaseName
			put the result into global testCaseResults
			if global testCaseResults.Errors is 0 then
				set global executionStatus to "Success"
			else
				set global executionStatus to "Failed"&&"Reason : "&global error
			end if
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try
	
end closeBrowser

to closeTab expectation
	
	try
		log "Close tab shortcut"
		typetext controlkey,"w"
		
		wait 1
		if expectation is not empty
			navigate(),(expectation)
		end if 
	Catch theException
		smartUtil.errorCapture theException
	End try
	
end closeTab


to back expectation
	
	try
		log "Back shortcut"
		wait 0.5
		typetext altkey,leftarrow
		//waitfor refresh then remove the below one
		if expectation is not empty
			Try
				wait 0.5
				pageLoad
				//navigate(),
				smartUtil.validateWithoutTry (expectation)
			Catch theException
				log "unable to find validation on return page, returning to the top and searching again"
				typetext controlkey, homeKey
				wait 0.6
				//scrollto instead?
				scrollto (expectation)
				navigate[],(expectation)
			End try
		end if 
		wait 3
	Catch theException
		smartUtil.errorCapture theException
	End try
	
end back

to goTo action,section

	try
		moveto the center of smartUtil.scrollTo(action,section)
		
	Catch theException
		smartUtil.errorCapture theException
	End try
	
end goTo

to navigate action,expectation, section,scrollSpeed
	
	try
		
		if action is not empty
			click the center of smartUtil.scrollTo(action, section,scrollSpeed)
			wait 2
			set the textStyle to default
		end if 
		
		if expectation is not empty
			wait 1
			validate expectation
		end if
		wait 1
		smartUtil.pageLoad
	Catch theException
		smartUtil.errorCapture theException
	End try
	
end navigate

to enterTextInTextField input
	
	wait 0.5
	typetext controlkey,a
	wait 0.4
	typetext input
	typetext returnkey
	wait 0.3
	
end enterTextInTextField


to textEntry label,input, x, y
	try
		if x is empty then set universal x to 200
		if y is empty then set universal y to 0
		
		doubleclick CenterLeft of scrollTo(label) + [x,y]
		wait 0.5
		typetext controlkey,"a"
		wait 0.4
		typetext input,escapeKey
		wait 0.3
	Catch theException
		smartUtil.errorCapture theException
	End try
end textEntry

to carouselRight toFind, expectation
	try
		log "Cycling through carousel to find "&tofind
		repeat until imagefound(10,text:(toFind),searchRectangle:(screenPartition().SUT.(universal browser)), ignorespaces:on)
			if repeatIndex() > 10
				logwarning ["unable to find carousel target " & toFind && the time]
				exit carouselRight
			end if
			wait 3
			click image:"icons/carousel/Right"
			wait 5
		end repeat
		logsuccess tofind&&"found"
		
		//validate
		if expectation is not empty
			click FoundImageLocation()
			wait 0.5
			validate expectation
		end if 
	Catch theException
		smartUtil.errorCapture theException
	End try
end carouselRight

to scrollTo toFind, section,scrollSpeed
	try
		if section is empty then set section to universal browser
		if scrollSpeed is empty
			if global scrollSpeed is empty then
				set scrollSpeed to 3
			else
				set scrollSpeed to global scrollSpeed
			end if
		end if
		
		// Images 
		set the remoteWorkInterval to 0.1
		if file (suiteinfo().imagesFolder&"/"&toFind&".png") exists
			repeat until imagefound(10,image:toFind,searchRectangle:(screenPartition().SUT.(section)))
				ScrollWheelDown scrollSpeed
				wait 2
				if repeatindex() > 18 then 
					logwarning "Cannot find"&&toFind
					Exit repeat
				end if
			end repeat
		else
			// OCR
			repeat until imagefound(waitfor:10,text:(toFind),searchRectangle:(screenPartition().SUT.(section)), ignoreNewlines:on, ignorespaces:on)
				log the textstyle
				ScrollWheelDown scrollSpeed //chrome 6.5 //edge 5
				wait 3
				if repeatindex() > 15 then 
					LogError "Cannot find"&&toFind
					Exit repeat
				end if
			end repeat
		end if
		//logsuccess toFind && "found"
		set the remoteWorkInterval to 0.4
		wait 2
		return foundimageinfo().imageRectangle 
	Catch theException
		smartUtil.errorCapture theException
	End try
end scrollTo

to clickUsingImage toFind,section
	try
		if section is empty then set section to universal browser
		if  imagefound(1,image:toFind,searchRectangle:(screenPartition().SUT.(section)))
			click FoundImageLocation()
		else
			LogWarning "Image: "&toFind&" not found"
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try
end clickUsingImage

to validate expectation,section
	try
		//add full screen
		if section is empty then set section to universal browser
		
		log "Validating existance of " & expectation
		
		if file (suiteinfo().imagesFolder&"/"&expectation&".png") exists
			waitfor universal pageWait, image:expectation,searchRectangle:(screenPartition().SUT.(section))
		else
			waitfor universal pageWait,text:(expectation),ignoreNewlines:on, ignorespaces:on,searchRectangle:(screenPartition().SUT.(section))
		end if 
		moveto (bottomCenter of the RemoteScreenRectangle- (0,300))
		
		//take a screenshot
		replace every occurrence of ":" in expectation with "_"
		replace every occurrence of "/" in expectation with "_"
		CaptureScreen {Name: universal screenshotPath&slash & the hour & the minute & the second && expectation }
		logsuccess expectation&&"Validation passed"
		return true
	Catch theException
		smartUtil.errorCapture theException
	End try
end validate


##validate Image
to validateImage expectation,section
	try
		//add full screen
		if section is empty then set section to universal browser
		
		log "Validating existance of " & expectation
		
		if file (suiteinfo().imagesFolder&"/"&expectation) exists
			waitfor universal pageWait, image:expectation,searchRectangle:(screenPartition().SUT.(section))
		end if 
		moveto (bottomCenter of the RemoteScreenRectangle- (0,300))
		
		//take a screenshot
		replace every occurrence of ":" in expectation with "_"
		replace every occurrence of "/" in expectation with "_"
		CaptureScreen {Name: universal screenshotPath&slash & the hour & the minute & the second && expectation }
		logsuccess expectation&&"Validation passed"
		return true
	Catch theException
		smartUtil.errorCapture theException
	End try
end validateImage




to validateWithoutTry expectation, section
	log "Validating existance of " & expectation
	
	//add full screen
	if section is empty then set section to universal browser
	
	if file (suiteinfo().imagesFolder&"/"&expectation&".png") exists
		assert that imagefound(image:expectation,waitfor:universal pageWait)
	else
		assert that imagefound(text:(expectation),searchRectangle:(screenPartition().SUT.(section)),ignoreNewlines:on, ignorespaces:on,waitfor:universal pageWait)
	end if 
	moveto (bottomCenter of the RemoteScreenRectangle- (0,300))
	
	//take a screenshot
	replace every occurrence of ":" in expectation with "_"
	CaptureScreen {Name: universal screenshotPath&slash & the hour & the minute & the second&& expectation }
	logsuccess "Validation passed"
	return true
	
end validateWithoutTry

to clickText toFind,section
	log "clicking on"&&toFind
	try
		// Images
		if file (suiteinfo().imagesFolder&"/"&toFind) exists
			click image:toFind,waitFor: universal pageWait,searchRectangle:(screenPartition().SUT.(section))
			
		else
			// OCR
			click {waitfor:universal pageWait,text:(toFind), ignoreNewlines:on, ignorespaces:on,searchRectangle:(screenPartition().SUT.(section))}
			logsuccess toFind && "found"
			return FoundImageInfo().imageRectangle
		end if
		return empty
	Catch theException
		smartUtil.errorCapture theException
	End try
end clickText


to textField  inp,returntext:"No"
	try
		
		typetext controlkey, a
		typetext backspace
		typetext inp
		wait 0.5
		if returntext is "yes" then typetext downArrow
	Catch theException
		smartUtil.errorCapture theException
	End try
end textField

to verifyAndEnterText fieldName, inp,section
	try
		navigate fieldName,,section
		
		typetext controlkey, a
		typetext backspace
		typetext inp
		wait 0.5
	Catch theException
		smartUtil.errorCapture theException
	End try
end verifyAndEnterText

to inspect action
	try
		typetext controlkey, shiftkey, "i"
		if action is "Open"
			validate ("Element")
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try
end inspect

to pageLoad
	try
		wait 0.5
		//waitfor universal pageWait, image:"icons/refresh", searchRectangle:(screenPartition().SUT.("browserRefresh"))
		if ImageFound(imageName:"icons/refresh", waitFor:universal pageWait, searchRectangle:(screenPartition().SUT.("browserRefresh")))
			log "Page loaded"
		else
			moveto (bottomCenter of the RemoteScreenRectangle- [0,300])
			//take a screenshot
			replace every occurrence of ":" in expectation with "_"
			CaptureScreen {Name: universal screenshotPath&slash& the hour & the minute & the second&& "Page not loaded"}
			LogError universal pageName&&"Page: "&"Screen was not loaded within"&&universal pageWait&&"seconds of screenPartitionured time"	
			exit all
		end if
		//	waitfor universal pageWait, image:"icons/refresh"
	Catch theException
		smartUtil.errorCapture theException
	End try
end pageLoad

to copyAndLog
	try
		typetext controlkey, "c"
		log the remoteclipboard
	Catch theException
		smartUtil.errorCapture theException
	End try
end copyAndLog

to goToPageEnd
	try
		click [20,140]
		typetext controlKey,endKey
		wait 1
	Catch theException
		smartUtil.errorCapture theException
	End try
end goToPageEnd

to goToTopOfPage
	try
		click [20,140]
		typetext controlKey,homeKey
		wait 1
	Catch theException
		smartUtil.errorCapture theException
	End try
end goToTopOfPage


to validateTextBasedReferenceText Lable,x1,y1,x2,y2,searchArea,input
	try
		log "Validating existance of " & Lable
		if searchArea is ""
			put ImageLocation(text:(Lable), waitFor: 10) into Location
		else
			put ImageLocation(text:(Lable),searchRectangle:(screenPartition().SUT.(searchArea))) into Location
		end if
		set the searchrectangle to [[Location.x+x1,Location.y-y1],[Location.x+x2,Location.y+y2]]
		waitfor universal pageWait,text:(input),ignoreNewlines:on, ignorespaces:on
		set the SearchRectangle to empty
		//take a screenshot
		replace every occurrence of ":" in Lable with "_"
		CaptureScreen {Name: universal screenshotPath&slash& the hour & the minute & the second&& Lable  }
		logsuccess input&&"is validated in "&&(Lable)
		return true
	Catch theException
		smartUtil.errorCapture theException
	End try
end validateTextBasedReferenceText


// function description: to read and return text from location identified with respect to text
to readTextUsingText fieldName, x1, y1, x2, y2, section
	try
		if searchArea is ""			
			put ImageRectangle(text:(fieldName), waitFor:universal pageWait) into textRec
		else			
			put ImageRectangle(text:(fieldName), waitFor:universal pageWait, searchRectangle:(screenPartition().SUT.(section))) into textRec			
		end if
		
		if x2 is "" and y2 is "" then
			put ReadText(textRec.topLeft + [x1,y1]) into currLocVal			
		else	
			log "search cor"&textRec.topLeft + [x1,y1],textRec.topLeft + [x2,y2]
			put ReadText(textRec.topLeft + [x1,y1], textRec.topLeft + [x2,y2]) into global currLocVal
			
		end if
		return global currLocVal
	Catch theException
		smartUtil.errorCapture theException
	End try
	
	
end readTextUsingText



put "Enter a value: " into prompt

put read prompt into userInput

put "Expected value: SomeValue" into expectedValue

if userInput = expectedValue then
	Log "Validation successful! The input matches the expected value."
else
	Log "Validation failed! The input does not match the expected value."
end if

to clickTextAtSpot toFind,xCord,yCord,section
	try
		if section is empty then set section to universal browser
		click {waitfor:universal pageWait,text:(toFind),hotspot:[xCord,yCord], ignoreNewlines:on,ignorespaces:on,searchRectangle:(screenPartition().SUT.(section))}
		logsuccess toFind && "found"
		return FoundImageInfo().imageRectangle
	Catch theException
		smartUtil.errorCapture theException
	End try
end clickTextAtSpot

to doubleClickTextAtSpot toFind,xCord,yCord,section
	try
		if section is empty then set section to universal browser
		
		DoubleClick {waitfor:universal pageWait,text:(toFind),hotspot:[xCord,yCord], ignoreNewlines:on, ignorespaces:on,searchRectangle:(screenPartition().SUT.(section))}
		logsuccess toFind && "found"
		return FoundImageInfo().imageRectangle
	Catch theException
		smartUtil.errorCapture theException
	End try
end doubleClickTextAtSpot


to dropDown input
	try
		typetext (input)
		typetext tabkey
	Catch theException
		smartUtil.errorCapture theException
	End try
end dropDown


to SelectDropDown inp,action, section
	try
		
		if action is not empty		
			click the center of smartUtil.scrollTo(action, section)
			wait 2
			set the TextStyle to Default
		end if
		repeat inp times
			typetext DownArrow
		end repeat
	Catch theException
		smartUtil.errorCapture theException
	End try
end SelectDropDown



to textFieldWithoutScroll toFind, inp, section
	try
		if section is empty then set section to universal browser
		if imagefound(waitfor:10,text:(toFind),searchRectangle:(screenPartition().SUT.(section)), ignoreNewlines:on, ignorespaces:on)
			click the center of foundimageinfo().imageRectangle
			typetext controlkey, "a"
			typetext inp
			wait 0.5
		else
			logwarning "Cannot find"&&toFind
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try
	
end textFieldWithoutScroll


to handle validatingActualExpectedText actualText,expectedText
	try
		if actualText is expectedText then
			LogSuccess "The actual text"&& actualText&&"is matching with Expected Text"&&expectedText
		else
			LogError  "The actual text"&& actualText&&"is not matching with Expected Text"&&expectedText
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try
end validatingActualExpectedText

to verifyPageNamefromURL PageName
	try
		smartUtil.pageLoad
		typetext controlKey,l
		typetext controlKey,a,c
		Put RemoteClipboard() into currentURL
		typetext escapeKey
		log currentURL
		If currentURL contains PageName  then
			LogSuccess PageName && "is present in current URL"
		Else
			LogError PageName && "is not present in current URL"
		End If
		return currentURL
	Catch theException
		smartUtil.errorCapture theException
	End try
	
end verifyPageNamefromURL

to getCurrentURL
	
	//smartUtil.pageLoad
	typetext controlKey,l
	typetext controlKey,a,c
	Put RemoteClipboard() into currentURL
	typetext escapeKey
	return currentURL
	
end getCurrentURL


to clickUsingImage toFind,section
	try
		if section is empty then set section to universal browser
		if  imagefound(20,image:toFind,searchRectangle:(screenPartition().SUT.(section)))
			click FoundImageLocation()
		else
			LogWarning "Image: "&toFind&" not found"
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try	
end clickUsingImage

to clickImagewithHotspot toFind,xCord,yCord,section
	try
		if section is empty then set section to universal browser
		if  imagefound(1,image:toFind,searchRectangle:(screenPartition().SUT.(section)))
			click image:toFind,hotspot:[xCord,yCord]
		else
			logerror universal pageName &":"&&toFind&" not found"
			LogError  Universal pageName  &&"Page"&":"&&"Image not found on screen within the given time "&& quote&&toFind&&quote
			CaptureScreen {Name: universal screenshotPath&slash& the hour & the minute & the second&& toFind }
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try
end clickImagewithHotspot


to verifyImage toFind,section
	try
		if section is empty then set section to universal browser
		if  imagefound(5,image:toFind,searchRectangle:(screenPartition().SUT.(section)))
			LogSuccess "Image: "&toFind&" is found"
		else
			LogWarning "Image: "&toFind&" not found"
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try
end verifyImage


to setCustomSearchRectangle input, x1, y1, x2, y2,section
	try
		put ImageRectangle(text:(input), waitFor:35,searchRectangle:(screenPartition().SUT.(section)), ignoreNewlines:on, ignorespaces:on) into customRect
		set  global SearchRect to [[customRect.X+x1,customRect.Y+y1],[customRect.X+x2,customRect.Y+y2]]
	Catch theException
		smartUtil.errorCapture theException
	End try
end setCustomSearchRectangle


to handle userFriendlymessage
	params errorMessage
	put errorMessage into Global ErrorMessage
	if Global ErrorMessage contains ...
	
		"No Such Command":handlerNotFound(Global ErrorMessage)
		
		"AssertionFailed":validationFailed()
		
		"InvalidParameters":passingParametersIssue()
		
		"File Not Found":imageNotExistInSuite(Global ErrorMessage)
		
		"No Image Found On Screen":noImageFoundOnScreen(Global ErrorMessage)
		
		"No Text Found On Screen":noTextFoundOnScreen(Global ErrorMessage)
		
		"Unable To Find Any Image On Screen":unableToFindImageOrTextWithInTime(Global ErrorMessage)
		
		"imagerectangle Error - Unable To Find Image":unableToFindImage(Global ErrorMessage)
		
		"Image Property List did not contain":imageNamePropertyError(Global ErrorMessage)
		
		"No Remote Connection":sutConnectionError()
		
		"Connection Failed - Unable to connect":connectingSUTError()
		
		"Unable To Capture Screen":capturingScreenError()
		
		"STMaxCallDepthExceeded":maxDepthError()
		
		"waitforall Error":waitForAllError()
		
		"Unable To Find Image":textOrImageIsNotFound(Global ErrorMessage)
		
		"Pasteboard inaccessible on remote machine":copyInaccessible()
		
		else
			scriptError(Global ErrorMessage)		
	end if
end userFriendlymessage


to handle textOrImageIsNotFound
	split Global ErrorMessage by "-"
	put item 3 of Global ErrorMessage into temp
	split temp by ":"
	if item 1 of temp contains "Text" then 
		put item 2 of temp into temp2
		if temp2 contains "Restricted" then 
			split temp2 by "Restricted"
			put item 1 of temp2 into temp3 
			split temp3 by "." 
			put item 1 of temp3 into temp4
			delete quote from temp4
			delete ")" from temp4
			put (quote&temp4&quote&&"Text is not found on screen to perform click operation") into global error
			LogError  Universal pageName &&"Page"&":"&&"Text is not found on screen to perform click operation on"&&quote&temp4&quote
		else
			delete quote from temp2
			delete ")" from temp2
			split temp2 by "."
			put item 1 of temp2 into temp5
			put (quote&temp5&quote&&"Text is not found on screen to perform click operation") into global error
			LogError  Universal pageName &&"Page"&":"&&"Text is not found on screen to perform click operation on"&&quote&temp5&quote
		end if
	else
		put item 3 of Global ErrorMessage into temp
		if temp contains "Restricted" then 
			split temp by "Restricted"
			put item 1 of temp into temp3 
			split temp3 by "Image" 
			put item 2 of temp3 into temp4
			delete quote from temp4
			delete ")" from temp4
			delete space from temp4
			put (quote&temp4&quote&&"Image is not found on screen to perform click operation") into global error
			LogError  Universal pageName &&"Page" &":"&&"Image is not found on screen to perform click operation on"&&quote&temp4&quote
		else
			split temp by "Restricted"
			put item 1 of temp into temp3 
			
			split temp3 by "Image" 
			put item 2 of temp3 into temp5
			delete quote from temp5
			delete ")" from temp5
			delete space from temp5
			put (quote&temp5&quote&&"Image is not found on screen to perform click operation") into global error
			LogError  Universal pageName  &&"Page"&":"&&"Image is not found on screen to perform click operation on"&&quote&temp5&quote
		end if
	end if 
end textOrImageIsNotFound


to handle maxDepthError
	put ("Calling a handler which is having same name as Script itself") into global error
	
	LogError "Calling a handler which is having same name as Script itself"
end maxDepthError

to handle waitForAllError
	split Global ErrorMessage  by ","
	put ("waitforAll Error--"&item 10 of Global ErrorMessage&&"is not found") into global error
	
	Logerror "waitforAll Error--"&item 10 of Global ErrorMessage&&"is not found"
	
end waitForAllError

to handle handlerNotFound
	split Global ErrorMessage by "-"
	put item 2 of Global ErrorMessage into temp 
	split temp by ":"
	put item 3 of temp into temp2	
	put (temp2&&"command is not found") into global error
	
	LogError temp2&&"command is not found"
end handlerNotFound

to validationFailed
	put "AssertionFailed validation has Failed" into global error
	LogError "AssertionFailed validation has Failed"
end validationFailed

to passingParametersIssue
	put "Invalid Properties are given" into global error
	
	LogError "Invalid Properties are given"
end passingParametersIssue

to handle imageNotExistInSuite
	split Global ErrorMessage by "-"
	put item 3 of Global ErrorMessage into temp
	split temp by ":"
	delete space from item 2 of temp
	put (quote&item 2 of temp&quote&&"Image is not found in captured Images") into global error
	LogError  Universal pageName  &&"Page"&":"&&"Image is not found in captured Images"&& quote&item 2 of temp&quote
end imageNotExistInSuite

to handle noImageFoundOnScreen
	split Global ErrorMessage by "-"
	put item 3 of Global ErrorMessage into temp
	split temp by ":"
	put item 2 of temp into temp2
	if temp2 contains "Restricted" then 
		split temp2 by "Restricted"
		put item 1 of temp2 into temp3 
		delete quote from temp3
		delete space from temp3
		put (quote&temp3&quote&&"Image is not found on screen to perform click operation") into global error
		LogError  Universal pageName  &&"Page"&":"&&"Image is not found on screen to perform click operation on"&& quote&temp3&quote
		
	else
		delete quote from temp2
		delete space from temp2
		put (quote&temp2&quote&&"Image is not found on screen to perform click operation") into global error
		LogError  Universal pageName  &&"Page" &":"&&"Image is not found on screen to perform click operation on"&&quote&temp2&quote
	end if
end noImageFoundOnScreen

to handle noTextFoundOnScreen
	split Global ErrorMessage by "-"
	put item 3 of Global ErrorMessage into temp
	split temp by ":"
	put item 3 of temp into temp2
	delete quote from temp2
	if temp2 contains "." then 
		split temp2 by "."
	end if
	delete ")" from item 1 of temp2
	put (quote&item 1 of temp2&quote&&"Text is not found on screen to perform click operation") into global error
	LogError  Universal pageName  &&"Page"&":"&&"Text is not found on screen to perform click operation on"&&quote&item 1 of temp2&quote
end noTextFoundOnScreen

to handle unableToFindImageOrTextWithInTime
	split Global ErrorMessage by "-"
	put item 3 of Global ErrorMessage into temp1
	split temp1 by "Screen"
	put item 2 of temp1 into temp2 
	split temp2 by "within"
	if item 1 of temp2 contains "TEXT" then 
		put  item 1 of temp2 into temp3
		split temp3 by ":"
		delete "(" from temp3
		delete ")" from temp3
		delete quote from temp3
		put (quote&item 2 of temp3&quote&&"Text is not found on screen within the given time.") into global error
		
		LogError  Universal pageName  &&"Page"&":"&&"Text is not found on screen within the given time "&& quote&item 2 of temp3&quote
	else
		put ( item 1 of temp2&&"Image is not found on screen within the given time.") into global error
		
		LogError  Universal pageName  &&"Page" &":"&&"Image is not found on screen within the given time "&& item 1 of temp2
	end if
end unableToFindImageOrTextWithInTime



to handle unableToFindImage
	
	split Global ErrorMessage by "-"
	put item 3 of Global ErrorMessage into temp
	split temp by ":"
	if item 1 of temp contains "Text" then 
		put item 2 of temp into temp2
		if temp2 contains "Restricted" then 
			split temp2 by "Restricted"
			put item 1 of temp2 into temp3 
			split temp3 by "." 
			put item 1 of temp3 into temp4
			delete quote from temp4
			delete ")" from temp4
			put (quote&temp4&quote&&"Text is not found in the given rectangle area") into global error
			LogError  Universal pageName &&"Page"&":"&&"Text is not found in the given rectangle area"&&quote&temp4&quote
		else
			delete quote from temp2
			delete ")" from temp2
			split temp2 by "."
			put item 1 of temp2 into temp5
			put (quote&temp5&quote&&"Text is not found in the given rectangle area") into global error
			LogError  Universal pageName &&"Page"&":"&&"Text is not found in the given rectangle area"&&quote&temp5&quote
		end if
	else
		put item 3 of Global ErrorMessage into temp
		if temp contains "Restricted" then 
			split temp by "Restricted"
			put item 1 of temp into temp3 
			split temp3 by "Image" 
			put item 2 of temp3 into temp4
			delete quote from temp4
			delete ")" from temp4
			delete space from temp4
			put (quote&temp4&quote&&"Image is not found in the given rectangle area") into global error
			LogError  Universal pageName &&"Page" &":"&&"Image is not found in the given rectangle area"&&quote&temp4&quote
		else
			split temp by "Restricted"
			put item 1 of temp into temp3 
			
			split temp3 by "Image" 
			put item 2 of temp3 into temp5
			delete quote from temp5
			delete ")" from temp5
			delete space from temp5
			put (quote&temp5&quote&&"Image is not found in the given rectangle area") into global error
			LogError  Universal pageName  &&"Page"&":"&&"Image is not found in the given rectangle area"&&quote&temp5&quote
		end if
	end if 
	
end unableToFindImage


to handle imageNamePropertyError
	put  ("ImageName Property is Missing.") into global error
	
	LogError "ImageName Property is Missing."
end imageNamePropertyError

to handle sutConnectionError

	put  ("There is No SUT to perform operations.") into global error
	
	LogError "There is No SUT to perform operations."
end sutConnectionError

to handle connectingSUTError
	put  ("Unable to connect SUT.") into global error
	LogError "Unable to connect SUT."
end connectingSUTError

to copyInaccessible
	put "Pasteboard inaccessible on remote machine" into global error
	LogError "Pasteboard inaccessible on remote machine"
end copyInaccessible

to handle capturingScreenError
	put "Error with Capturing the screen " into global error
	LogError "Error with Capturing the screen "
end capturingScreenError

to handle scriptError
	put "Technical Error:"&&Global ErrorMessage into global error
	
	LogError "Technical Error:"&&Global ErrorMessage
end scriptError

to handle errorCapture errorMessage
	//log errorMessage
	if errorMessage contains "Runtime"
		userFriendlyMessage errorMessage
		delete all <punctuation character> from global error
		CaptureScreen {Name: universal screenshotPath&slash& the hour & the minute & the second&&"errorScreen" }
		set FailedStepURL to smartUtil.getCurrentURL
		log "FailedStepURL:"&FailedStepURL
	else
		LogError errorMessage
		delete all <punctuation character> from global error
		CaptureScreen {Name: universal screenshotPath&slash& the hour & the minute & the second&&"errorScreen" }
		set FailedStepURL to smartUtil.getCurrentURL
		log "FailedStepURL:"&FailedStepURL
	End if
	exit all
end errorCapture

to scrollToUp toFind,scrollValue,section
	try
		// OCR
		click [20,140]
		repeat until imagefound(waitfor:0,text:(toFind),searchRectangle:(screenPartition().SUT.(section)), ignoreNewlines:on, ignorespaces:on)
			log the textstyle
			ScrollWheelUp scrollValue
			wait 0.6
			if repeatindex() > 15 then 
				logwarning "Cannot find"&&toFind
				Exit repeat
			end if
		end repeat
		set the remoteWorkInterval to 0.4
		return foundimageinfo().imageRectangle 
	Catch theException
		smartUtil.errorCapture theException
	End try
end scrollToUp

to navigateAndMouseAction action,expectation, section,scrollSpeed,mouseAction,x = 0,y = 0
	try
		
		if action is not empty
			do mouseAction&&"the center of smartUtil.scrollTo(action, section,scrollSpeed)+[x,y]"
			wait 2
			set the textStyle to default
		end if 
		
		if expectation is not empty
			wait 1
			smartUtil.validate expectation
		end if
		wait 1
	Catch theException
		smartUtil.errorCapture theException
	End try
end navigateAndMouseAction

to deleteAllTheFilesInDownloads

	typeText controlKey,a
	TypeText shiftKey, deleteKey
	
end deleteAllTheFilesInDownloads

to selectMutlipleCheckBoxes inp
	try
		repeat inp times
			typetext tabKey,spacebar
		end repeat
	Catch theException
		smartUtil.errorCapture theException
	End try
end selectMutlipleCheckBoxes

to scrollToDown toFind,scrollValue,section
	try
		// OCR
		click [20,140]
		repeat until imagefound(waitfor:0,text:(toFind),searchRectangle:(screenPartition().SUT.(section)), ignoreNewlines:on, ignorespaces:on)
			log the textstyle
			ScrollWheelDown scrollValue
			wait 0.6
			if repeatindex() > 15 then 
				logwarning "Cannot find"&&toFind
				Exit repeat
			end if
		end repeat
		set the remoteWorkInterval to 0.4
		return foundimageinfo().imageRectangle 
	Catch theException
		smartUtil.errorCapture theException
	End try
end scrollToDown

to goToHomePage
	try
		click [20,140]
		typetext controlKey,homeKey
		wait 1
	Catch theException
		smartUtil.errorCapture theException
	End try
end goToHomePage

to globalScrollSpeed scrollSpeed
	try
		set global scrollSpeed to scrollSpeed
	Catch theException
		smartUtil.errorCapture theException
	End try
end globalScrollSpeed

to handle completeScreenLoad
	set the ScriptLogging to OFF
	--smartUtil.pageLoad
	repeat until page is "stable"
		put ReadText(screenPartition().SUT.(Universal browser),waitfor:0) into Info
		if Info is pageLoadInfo
			set page to "stable"
			logsuccess "The whole screen was fully displayed."
			Exit repeat
		end if
		if repeatIndex() > 5 then
			set page to "stable"
			logwarning "The whole screen wasn't displayed within the allotted time, or there were some dynamic images/text on the screen."
			exit repeat
		end if
		put Info into pageLoadInfo
	end repeat
	set the scriptLogging to on
end completeScreenLoad

to clickTextWithoutTry toFind,section
	log "clicking on"&&toFind
	// Images
	if file (suiteinfo().imagesFolder&"/"&toFind) exists
		click image:toFind,waitFor: universal pageWait,searchRectangle:(screenPartition().SUT.(section))
		
	else
		// OCR
		click {waitfor:universal pageWait,text:(toFind), ignoreNewlines:on, ignorespaces:on,searchRectangle:(screenPartition().SUT.(section))}
		logsuccess toFind && "found"
		return FoundImageInfo().imageRectangle
	end if
	return empty
end clickTextWithoutTry

to closeBrowser
	wait 2
	typetext controlkey,shiftkey,"w"
	
end closeBrowser

to handle screenShotRequisite
	try		
		put the date into currentExecutionDate
		replace every occurrence of "/" from currentExecutionDate with "-"
		put the time into currentExecutionTime
		replace every occurrence of ":" from currentExecutionTime with "-"
		replace every occurrence of space from currentExecutionTime with "-"
		set the Suitevariables.screenShotFolder to the suiteinfo.path&"/AllscreenShots"&"/"&Global testcaseName&"/"&currentExecutionDate&"/"&currentExecutionTime
	Catch theException
		"CommonUtilities/ErrorMessageHandler".userFriendlymessage theException
	End try
end screenShotRequisite



to handle screenShot 
	Try	
		screenShotRequisite
		if folder (the Suitevariables.screenShotFolder) exists then 
			CaptureScreen {Name:the Suitevariables.screenShotFolder&"\"&the Suitevariables.screenShotCount,imageFormat:JPG}
		else
			create folder (the Suitevariables.screenShotFolder)
			CaptureScreen {Name:the Suitevariables.screenShotFolder&"\"&the Suitevariables.screenShotCount,imageFormat:JPG}
		end if
		put the Suitevariables.screenShotCount + 1 into the Suitevariables.screenShotCount
	Catch theException
		"CommonUtilities/ErrorMessageHandler".userFriendlymessage theException  
	End try
end screenShot

to handle errorScreenShot 
	Try	
		screenShotRequisite
		if folder (the Suitevariables.screenShotFolder) exists then 
			CaptureScreen {Name:"Screen_Error"&the Suitevariables.screenShotFolder&"\"&the Suitevariables.screenShotCount,imageFormat:JPG}
		else
			create folder (the Suitevariables.screenShotFolder)
			CaptureScreen {Name:"Screen_Error"&the Suitevariables.screenShotFolder&"\"&the Suitevariables.screenShotCount,imageFormat:JPG}
		end if
		put the Suitevariables.screenShotCount + 1 into the Suitevariables.screenShotCount
	Catch theException
		"CommonUtilities/ErrorMessageHandler".userFriendlymessage theException  
	End try
end errorScreenShot

# setting text style
to setTextstyle txtStyle
	set properties to{
		Default: empty,
		GrayText:{contrastColor:"AutoDetect", contrast:"On", contrastTolerance:"45"},
		DownloadAll:{contrastColor:"AutoDetect", contrast:"On",WaitFor:8,contrastTolerance:"45"},
	}	
	Try
		set the TextStyle to properties.(txtStyle)
	Catch
		Log txtStyle && "is not a recognized Style Properties."
		set the TextStyle to  empty
	End try
	return the TextStyle	
end setTextstyle


to handle screenSettleDown
	params waitDuration
	set the ScriptLogging to off
	repeat waitDuration seconds
		MoveTo [100,100]
		MoveTo [400,400]
	end repeat
	set the ScriptLogging to on
end screenSettleDown

to handle completeScreenLoad
	set the ScriptLogging to OFF
	--core.pageLoad
	repeat until page is "stable"
		put ReadText(screenPartition().SUT.(Universal browser),waitfor:0) into Info
		if Info is pageLoadInfo
			set page to "stable"
			logsuccess "The whole screen was fully displayed."
			Exit repeat
		end if
		if repeatIndex() > 5 then
			set page to "stable"
			logwarning "The whole screen wasn't displayed within the allotted time, or there were some dynamic images/text on the screen."
			exit repeat
		end if
		put Info into pageLoadInfo
	end repeat
	set the scriptLogging to on
end completeScreenLoad	

to handle listOfValidations  toFind,x1,y1,x2,y2,listName,section
	smartUtil.setCustomSearchRectangle toFind,x1,y1,x2,y2
	set SearchArea to ReadText(screenPartition().SUT.(section))
	--log SearchArea
	repeat with each item currentTerm in listName
		if (SearchArea contains currentterm) then
			LogSuccess currentTerm && "exists in the Application."
		else
			LogError currentterm && "not exists in the Application."
		end if
	end repeat
	replace every occurrence of ":" in toFind with "_"
	replace every occurrence of "/" in toFind with "_"
	CaptureScreen {Name: universal screenshotPath&slash & the hour & the minute & the second && toFind }
end listOfValidations

to handle listOfNegativeValidations toFind,x1,y1,x2,y2,listName,section 
	smartUtil.setCustomSearchRectangle toFind,x1,y1,x2,y2
	set SearchArea to ReadText(screenPartition().SUT.("Custompart"))
	repeat with each item currentTerm in listName
		if (SearchArea does not contain currentterm) then
			LogSuccess currentTerm && "not Exists in the Application."
		else
			LogError currentterm && "Exists in the Application."
		end if
	end repeat
end listOfNegativeValidations
