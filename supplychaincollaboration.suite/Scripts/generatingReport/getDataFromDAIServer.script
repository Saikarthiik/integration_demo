
to reportExcelReading
	put Date into dateStamp
	replace every occurrence of "/" with "" in dateStamp 
	set global path to ResourcePath()&"/Reports/"&global configName&"-"&global reportName&"PackReport_"&dateStamp&".xlsx"
	set universal myexceldb to {type: "excel",file:global path,name:"ExecutionReport",writable:"yes"}
end reportExcelReading

to deleteDataFromExcel
	set universal myexceldb to {type: "excel",file:global path,name:"ExecutionReport",writable:"yes"}
	put number of records of universal myexceldb into recordsCount
	log "number of records: "&recordsCount
	if recordsCount is greater than 0 then delete all records from universal myexceldb
	set universal myexceldb to empty
end deleteDataFromExcel
//concept  4
to handle initialSetup
	set MyExcelFile to Workbook(global path)
	set Sheet to worksheet(MyExcelFile,"ExecutionReport")
	put "Count" into Sheet's Cell("A1")
	put "TestCaseName" into Sheet's Cell("C1")
	put "Status" into Sheet's Cell("D1")
	put "FailedReason" into Sheet's Cell("E1")
	put "Run_ID" into Sheet's Cell("B1")
	put "Runtime" into Sheet's Cell("F1")
	--	put "Browser" into Sheet's Cell("F1")
	
	repeat number of items of  global testCaseNames times
		put repeatIndex() into Sheet's Cell("A"&repeatIndex()+1)
	end repeat
	
	set universal myexceldb to {type: "excel",file:global path,name:"ExecutionReport",writable:"yes"}
	repeat number of items of global testCaseNames
		
		set LineData to the records of universal myexceldb where Count is repeatindex()
		--put item repeatindex() of global browsername into LineData.Browser
		put item repeatindex() of global testCaseNames into LineData.TestCaseName
		put item repeatindex() of global testCaseId into LineData.Run_ID
		
	end repeat
end initialSetup

to getInstanceId test_config_id
	
	--put "9693ba98-8e41-4dfa-9bda-4e1aeba7fb8f" into test_config_id
	//set  test_config_id to "85bedc40-9f8d-4a26-86f0-fcfafb69b813"
	RUN "generatingReport/GetAccessToken1"
	put global accessToken into accessToken
	put GetTestconfigTasks().responsebody into Allresponses
	log Allresponses
	put JSONValue(Allresponses) into testResponse
	//log testResponse
	put item 1 of testResponse.items into resultObj
	log resultObj
	put (resultObj.created_datetime + 5 hrs 30 mins) into createdDateTime
	split createdDateTime by "T"
	put (item 2 of createdDateTime) into startTime
	split startTime by "."
	put (item 1 of startTime) into global configStartTime
	--log global configStartTime
	put (resultObj.updated_datetime + 5 hrs 30 mins) into updatedDateTime
	Split updatedDateTime by "T"
	put (item 2 of updatedDateTime) into endTime
	split endTime by "."
	put (item 1 of endTime) into global configEndTime
	put (resultObj.updated_datetime - resultObj.created_datetime) into totalConfigExecutionTime
	put totalConfigExecutionTime format "[hours]:[minutes]:[seconds]" into global totalConfigExecutionTime
	put resultObj.task_instance_id into the suitevariables.task_instance_id
end getInstanceId

to getTestCaseNameFromInstance
	--put "8ffa54ac-0deb-499b-9f65-0acea6374b41" into test_config_id
	RUN "generatingReport/GetAccessToken1"
	put global accessToken into accessToken
	put GetTestconfigtaskRuns().responsebody into Allresponses
	put JSONValue(Allresponses) into testResponse
	//log "11111111111",testResponse
	--11/05/2023
	put item 1 of testResponse.items into configName
	if global configName is empty then put configName.test_config.name into global configName
	--log global configName
	------------------------
	if testResponse contains "SCC" then
		
		put "Functional" into global reportName
		
	else
		put "Functional" into global reportName
	end if
	repeat with each item of testResponse.items
		if it.testcase contains "ReportGeneration" or it.testcase contains "Setup"
		else
			insert it.testcase into global testCaseNames
			insert it.id into global testCaseId
			--insert "Chrome" into global browsername 
		end if
	end repeat
	
end getTestCaseNameFromInstance

to sendEmail moduleName

	if ConnectionInfo().Status is "Connected"
		put ConnectionInfo().username into User_Name
	else
		throw "Error","SUT not connected"
	end if
	split User_Name by "\"
	put item 2 of User_Name into  ExcelUserName
	log "User : "& ExcelUserName
	(*set DataFilePath to "C:\AutomationResources\SCC\"& ExcelUserName&"_SCC_TestDataFile.xlsx"
	set reportingExcel to {type: "excel",file: DataFilePath,name:"reportingDetails",writable:"Yes"} 
	set reportingDetails to the records of reportingExcel*)
	--log "C:\AutomationResources\SCC\"&reportGeneration&"_SCC_TestDataFile.xlsx"
	
	
	if moduleName is "SCC_Planning"
		set DataFilePath to "C:\AutomationResources\SCC\"& ExcelUserName&"_SCC_TestDataFile.xlsx"
		set reportingExcel to {type: "excel",file: DataFilePath,name:"reportingDetails",writable:"Yes"}
	else if moduleName is "SCC_PORS"
		set DataFilePath to "C:\AutomationResources\SCC\"& ExcelUserName&"_SCC_PORS_TestDataFile.xlsx"
		set reportingExcel to {type: "excel",file: DataFilePath,name:"reportingDetails",writable:"Yes"}
	else if moduleName is "SCC_SMI"
		set DataFilePath to "C:\AutomationResources\SCC\"& ExcelUserName&"_SCC_SMI_TestDataFile.xlsx"
		set reportingExcel to {type: "excel",file: DataFilePath,name:"reportingDetails",writable:"Yes"}
	else if moduleName is "SCC_SPM"
		set DataFilePath to "C:\AutomationResources\SCC\"& ExcelUserName&"_SCC_SPM_TestDataFile.xlsx"
		set reportingExcel to {type: "excel",file: DataFilePath,name:"reportingDetails",writable:"Yes"}
	else if moduleName is"SCC_WPO"
		set DataFilePath to "C:\AutomationResources\SCC\"& ExcelUserName&"_SCC_WPO_TestDataFile.xlsx"
		set reportingExcel to {type: "excel",file: DataFilePath,name:"reportingDetails",writable:"Yes"}
		
	end if
	
	(*set DataFilePath to "C:\AutomationResources\SCC\reportGeneration_SCC_TestDataFile.xlsx"
	set reportingExcel to {type: "excel",file: DataFilePath,name:ExcelUserName&"_reportingDetails",writable:"Yes"} *)
	set reportingDetails to the records of reportingExcel
	if global reportName is "SCC" then
		set global reportName to "Regression"
	else
		set global reportName to "Functional"
	end if
	put Date into dateStamp
	
	if global FailedTestCases+global PassedTestCases is not global totalTestcases then
		put global totalTestcases-(global FailedTestCases+global PassedTestCases)  into global ErrorTestcase 
		
		//log global ErrorTestcase
		
	end if
	
	if global ErrorTestcase >0 then
		
		put (newline&"Error Test Cases :"&& global ErrorTestcase) into global ErrorTestcase1
		
	end if
	
	if global FailedTestCases >0 then
		
		put (newline&"Failed Test Cases :"&& global FailedTestCases) into global FailedTestCases1
		
	end if
	replace every occurrence of "/" with "" in dateStamp
	if global configName = "Consolidated" then
		getTotalTime
		if global errorScreenShotZipFile is empty
			SendMail{to:reportingDetails.tomailids,CC:reportingDetails.ccmailids, subject:global configName&&"Report : SCC"&&global reportName&&"pack Report_"&date, message:"Hi,"&newline&newline&"PFA SCC"&&global reportName&&"Pack Automation Execution Report run on"&&date&&"along with the evidences attached for failures."&newline&"DAI Server:"&the suitevariables.baseURL&newline&newline&"Total Test Cases : "&global totalTestcases&global FailedTestCases1&newline&"Passed Test Cases :"&&global PassedTestCases&global ErrorTestcase1&newline&newline&"Total Execution Time :"&&global totalTime&newline&"Please reach out to SCC Test Automation Team for any issues."&newline&"Best Best Regards,"&newline&newline&"TestAutomationTeam.",attachment:[global path],SMTP_HOST:"smtp.cos.is.keysight.com", smtp_port:587,smtp_type:"Anonymous",smtp_user:"SCC_TestResults@keysight.com"}
			
		else	
			SendMail{to:reportingDetails.tomailids,CC:reportingDetails.ccmailids, subject:global configName&&"Report : SCC"&&global reportName&&"pack Report_"&date, message:"Hi,"&newline&newline&"PFA SCC"&&global reportName&&"Pack Automation Execution Report run on"&&date&&"along with the evidences attached for failures."&newline&"DAI Server:"&the suitevariables.baseURL&newline&newline&"Total Test Cases : "&global totalTestcases&newline&global FailedTestCases1&newline&"Passed Test Cases :"&&global PassedTestCases&global ErrorTestcase1&newline&newline&"Total Execution Time :"&&global totalTime&newline&"Please reach out to SCC Test Automation Team for any issues."&newline&newline&"Best Regards,"&newline&"TestAutomationTeam.",attachment:[global path,global errorScreenShotZipFile],SMTP_HOST:"smtp.cos.is.keysight.com", smtp_port:587,smtp_type:"Anonymous",smtp_user:"SCC_TestResults@keysight.com"}
			
		end if
	else
		if global errorScreenShotZipFile is empty
			SendMail{to:reportingDetails.tomailids,CC:reportingDetails.ccmailids, subject:global configName&&": SCC"&&global reportName&&"pack Report_"&date, message:"Hi,"&newline&newline&"PFA SCC"&&global reportName&&"Pack Automation Execution Report run on"&&date&&"along with the evidences attached for failures."&newline&"DAI Server:"&the suitevariables.baseURL&newline&newline&"Total Test Cases : "&global totalTestcases&global FailedTestCases1&newline&"Passed Test Cases :"&&global PassedTestCases&global ErrorTestcase1&newline&newline&"The total Execution time is "&global totalConfigExecutionTime&newline&newline&"The test config"&&global configName&&"Execution start time is "&global configStartTime&"(IST)"&newline&newline&"The test config"&&global configName&&"Execution end time is "&global configEndTime&"(IST)"&newline&newline&"Please reach out to SCC Test Automation Team for any issues."&newline&newline&"Best Regards,"&newline&"TestAutomationTeam.",attachment:[global path],SMTP_HOST:"smtp.cos.is.keysight.com", smtp_port:587,smtp_type:"Anonymous",smtp_user:"SCC_TestResults@keysight.com"}
			
		else	
			SendMail{to:reportingDetails.tomailids,CC:reportingDetails.ccmailids, subject:global configName&&": SCC"&&global reportName&&"pack Report_"&date, message:"Hi,"&newline&newline&"PFA SCC"&&global reportName&&"Pack Automation Execution Report run on"&&date&&"along with the evidences attached for failures."&newline&"DAI Server:"&the suitevariables.baseURL&newline&newline&"Total Test Cases : "&global totalTestcases&global FailedTestCases1&newline&"Passed Test Cases :"&&global PassedTestCases&global ErrorTestcase1&newline&newline&"The total Execution time is "&global totalConfigExecutionTime&newline&newline&"The test config"&&global configName&&"Execution start time is "&global configStartTime&"(IST)"&newline&newline&"The test config"&&global configName&&"Execution end time is "&global configEndTime&"(IST)"&newline&newline&"Please reach out to SCC Test Automation Team for any issues."&newline&newline&"Best Regards,"&newline&"TestAutomationTeam.",attachment:[global path,global errorScreenShotZipFile],SMTP_HOST:"smtp.cos.is.keysight.com", smtp_port:587,smtp_type:"Anonymous",smtp_user:"SCC_TestResults@keysight.com"}
			
		end if
	end if
	
end sendEmail

to downloadFailedScreenshot run_id,testCaseName
	--log run_id
	RUN "generatingReport/GetAccessToken1"
	put global accessToken into accessToken
	put run_id  into run_id
	put GetScreenshotsFromModel().responsebody into Allresponses
	put JSONValue(Allresponses) into var_response
	put item last of var_response.items into var_responseLog
	put the suitevariables.baseURL&var_responseLog.img_download_url into downloadScreenUrl
	put Url downloadScreenUrl into errorScreenShot
	--log errorScreenShot
	put base64Encode(errorScreenShot) into errorScreen
	put ResourcePath()&"/"&"Reports/"&&global configName&"-ErrorScreenShots" into global errorScreenShotPath
	if repeatIndex() is 1 then
		put global errorScreenShotPath&".zip" into errorScreenShotPathZip
		if folder errorScreenShotPathZip exists then delete folder errorScreenShotPathZip
		if folder global errorScreenShotPath exists then
			delete folder global errorScreenShotPath
			create new folder global errorScreenShotPath
		else
			create new folder global errorScreenShotPath
		end if
	end if
	if repeatIndex() is 1 then
		put Date&"_"&Time into global timeAndDate
		replace every occurrence of ":" in global timeAndDate with "_"
		delete every occurrence of space in global timeAndDate
		replace every occurrence of "/" in global timeAndDate with "_"
		//log global timeAndDate
	end if
	put global errorScreenShotPath&"/"&global timeAndDate&"/"&testCaseName&"/"&"RunId_"&run_id&".png" into screenShotName
	put base64Decode(errorScreen) into file screenShotName
end downloadFailedScreenshot

to handle getErrorScreenWithRunID
	"generatingReport/getDataFromDAIServer".reportExcelReading
	set rundetails to the records of universal myexceldb where Status is "FAILED"
	//log rundetails
	repeat with each item of rundetails
		put it.run_id into run_id
		put it.testcasename into testCaseName
		downloadFailedScreenshot run_id,testCaseName
		//core.screenSettleDown 1
	end repeat
	if rundetails is not empty
		put global errorScreenShotPath into errorScreenshotFolder
		//core.screenSettleDown 1
		put Date into dateStamp//07-04-3023
		replace every occurrence of "/" with "" in dateStamp
		Zip folder errorScreenshotFolder as file (errorScreenshotFolder&"_"&dateStamp&".zip")
		put errorScreenshotFolder&"_"&dateStamp&".zip" into global errorScreenShotZipFile
	end if
end getErrorScreenWithRunID

//to get Total Time for Consolidated report only
to getTotalTime
	set universal myexceldb to {type: "excel",file:global path,name:"ExecutionReport",writable:"yes"}
	set  records to the records of universal myexceldb
	repeat with each item of records
		insert it.Run_Id into runids
	end repeat
	(*log runids
log number of items of runids*)
	put min(runids) into smallestRunID
	put max(runids) into highestRunID
	(*log smallestRunID
log highestRunID
*)
	put [smallestRunID,highestRunID] into smallLargestID
	repeat 2 times
		put item repeatindex() of smallLargestID into testId
		//get access token
		RUN "generatingReport/GetAccessToken1"
		put global accessToken into accessToken
		put GetRunDetails().responsebody into Allresponses
		put JSONValue(Allresponses) into testResponse
		--log testResponse.items
		put item 1 of testResponse.items into x
		if repeatindex() is 1 then 
			put x.starttime into startingTime
		else
			put x.endtime into endingTime
		end if
	end repeat
	put (endingTime minus startingTime) into totalTime
	--log totalTime
	put totalTime format "[hours]:[minutes]:[seconds]" into global totalTime
	//log global totalTime
end getTotalTime
