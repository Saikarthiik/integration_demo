to validateWhetherScreenIsOnDashBoardOrNot
	Typetext enterKey
	if ImageFound(text:"Dashboard", waitFor:universal pageWait,searchRectangle:(screenPartition().SUT.("topLeftQuadrant")))
		wait 3
		smartUtil.clickText"Dashboard","topLeftQuadrant"	
		wait 2
		if ImageFound(text:"Supply Chain Collaboration - Weekly Planned Order",searchRectangle:(screenPartition().SUT.("THTH")))
			LogSuccess "The Application is on the Dashboard continue with the next steps"
		else
			"SC2_CommonActions/sc2CommonHandlers".AppModuleSelector universal data.moduleName,universal data.titleofModule
		end if
		smartUtil.validate"Supply Chain Collaboration - Weekly Planned Order","topLeftQuadrant"	
	else
		LogWarning "The Application is not on the Dashboard Page for Next Validations Hence, Login to the Application for Validations"
		"SC2_Login/logInAndLogout_commonHandlers".launchURL
		##Login to the Application
		"SC2_Login/logInAndLogout_commonHandlers".logInToSC2App universal data.userName,universal data.passWord
		##Sets the Defualt Module in the Application
		"SC2_CommonActions/sc2CommonHandlers".AppModuleSelector universal data.moduleName,universal data.titleofModule
		##Validations on the Dashboard Page	
		LogSuccess " loged in to the Application  and the Application is on the Dashboard continue with the next steps"
	end if
end validateWhetherScreenIsOnDashBoardOrNot






to downloadAndValidate menu,subMenu,tertiaryMenu,columnNameInExcel
	"SC2_CommonActions/sc2CommonHandlers".navigateMenuandSubMenu menu,subMenu
	if tertiaryMenu is empty
		LogSuccess "Validating the Download Functionality in the "&&subMenu
		smartUtil.completeScreenLoad
	else
		smartUtil.setCustomSearchRectangle"Menu",200,-100,500,800,"LHLH"
		if ImageFound(text:universal data.tertiaryMenu,searchRectangle:(screenPartition().SUT.("Custompart")))
			LogSuccess"Validating the Download Functionality in the"&&subMenu
			set  the TextStyle to ""
			smartUtil.setCustomSearchRectangle"Menu",200,-100,500,800,"LHLH"
			set  the TextStyle to {caseSensitive:on,DPI:250}
			smartUtil.clickText universal data.tertiaryMenu,"Custompart"
		end if
	end if
	#Wait Until the Complete Page to be Loaded (Waiting up to Universal pagewait)
	smartUtil.validate"Filter","LHLH"
	smartUtil.completeScreenLoad
	wait 2
	##Getting the Total Count from the Application
	"SC2_CommonActions/sc2CommonHandlers".getTheTotalNumberOfItemsFromTheApplication
	#Click on the Export Icon in the Application
	wait 1
	smartUtil.clickUsingImage"WPO/exportIcon","TRQ"
	wait 1.5
	waitFor 250,{text:"File Processed Successfully",SearchRectangle:[778,108,1140,167]}--remove serach rect
	##Loging  the Time Taken to Download the File
	LogSuccess "Time taken to download the file is:"&&the result
	##Validate the File Processed Successfully after Downloading the File
	smartUtil.validate"File Processed Successfully","THTH"
	#Open Excel file from the Downloads
	--"excelFileInteractions".openExcelFromDownloads fileName
	set  the TextStyle to {ignoreSpaces:Yes}
	set the TextStyle to{textDifference:1,ignoreUnderscores:Yes}
	typetext controlKey,j
	wait 3
	smartUtil.setCustomSearchRectangle"Download history",600,60,1300,120,"LHLH"
	smartUtil.clickUsingImage "icons/folderIcon","Custompart"
	TypeText functionkeys,f2
	TypeText  controlKey,a,c
	put RemoteClipboard() into universal downloadedFileName
	LogSuccess"File name:"&&universal downloadedFileName 
	wait 1
	TypeText returnKey
	Typetext altKey,returnKey
	smartUtil.clickTextAtSpot"Type of file",300,0
	smartUtil.doubleClickTextAtSpot "Type of file",300,0
	TypeText controlKey,c
	put RemoteClipboard() into universal fileType
	Log "Downloaded file Type is :" &&universal fileType
	TypeText  escapeKey
	if universal fileType  contains ".xlsx"
		LogSuccess "The" &&universal downloadedFileName&&"file is in the xlsx format"
	else
		LogWarning"The" &&universal downloadedFileName&&"file is in the"&&universal fileType&&"format"
	end if
	wait 2
	TypeText returnKey
	wait until ImageFound(text:"Merge",searchRectangle:(screenPartition().SUT.("THTH")),waitFor:universal pageWait)
	if ImageFound(text:"Merge",searchRectangle:(screenPartition().SUT.("THTH")),waitFor:2)
		LogSuccess "The Excel File is opend"
	else
		LogError "The Excel file is not Opend"
	end if
	set the TextStyle to default
	##Validating the text after opening the Excel
	--smartUtil.validate "ORG","TH"
	--"excelFileInteractions".findTextInWorksheet columnNameInExportedFile
	##Get the total Count of the items from the Exported file
	Typetext controlKey,a
	wait 0.5
	Typetext altKey,h,o,a,h,o,i
	wait 0.5
	click[1088,464]
	--"excelFileInteractions".findTextInWorksheet columnNameInExportedFile
	"excelFileInteractions".findTextInWorksheet columnNameInExcel
	wait 2
	typetext controlKey,shiftkey,downArrow
	wait 2
	typetext controlKey,c
	wait 3
	put RemoteClipboard() into global countAfterCheckingDuplicates
	--log global countAfterCheckingDuplicates
	split global countAfterCheckingDuplicates by newline
	--log (the number of items of global countAfterCheckingDuplicates)-1
	--put countFromExcel to(number of items of global countAfterCheckingDuplicates-1)
	put (number of items of global countAfterCheckingDuplicates-1) into countFromExcel
	log "Count: "&& countFromExcel
	click[1088,464]
	#closing excel file
	excelFileInteractions.closeFileByclickinOnSave
	#close the File Explorer
	Typetext controlKey,w
	##Close the Downloads Page
	smartUtil.clickText"Clear all","RHRH"
	smartUtil.closeTab
	#Asserting the count from the UI with the data present in the Excel file
	if countFromExcel equal to universal countOfValuesFromAppliaction
		LogSuccess "The Total Record count is Same in the Application and Exported File of"&&universal downloadedFileName&&"and the file type is "&& universal fileType
		insert subMenu into universal validDwonloadFunctionalitySubmenu
		
	else 
		LogError "The Total Record count is Not Same in the Application and Exported File"&&universal downloadedFileName
		insert subMenu into universal invalidDwonloadFunctionalitySubmenu
	end if
	smartUtil.clickText"Dashboard","THTH"
	wait 2
end downloadAndValidate

to selectPreference Menu,Options
	smartUtil.setCustomSearchRectangle"Setting Filter Preferences",-100,50,1800,1300,"LHLH"
	repeat with each option of Options
		Repeat until ImageFound(text:Menu,searchRectangle:(screenPartition().SUT.("CustomPart")))
			ScrollWheelDown 4
		End Repeat
		put FoundImageLocation() into MenuLoc
		Click FoundImageLocation()
		put the number of items of Options into OptionsToSelect
		put it into FirstItem	
		smartUtil.setCustomSearchRectangle Menu,-40,10,350,280,"LH"
		#smartUtil.validate FirstCharacter,CustomPart
		smartUtil.setCustomSearchRectangle"Dashboard",-80,100,2000,1800,"THTH"
		if ImageFound(text:"Search",searchRectangle:(screenPartition().SUT.("CustomPart")))
			smartUtil.clickText "Search",CustomPart
			--smartUtil.textField it
			Typetext option
			wait 2
			--typetext spacebar
			smartUtil.setCustomSearchRectangle Menu,-10,50,300,300,"CustomPart"
			set  the TextStyle to {validWords:option}
			smartUtil.clickText option,"CustomPart"
			set  the TextStyle to default
		else if ImageFound(text:Menu,searchRectangle:(screenPartition().SUT.("CustomPart")))
			smartUtil.clickTextAtSpot Menu,-30,50
			Drag MouseLocation()
			Drop [1080,1000]
			TypeText backspace
			Typetext option
			smartUtil.setCustomSearchRectangle Menu,-10,50,300,300,"CustomPart"
			set  the TextStyle to {validWords:option}
			smartUtil.clickText option,"CustomPart"
			set  the TextStyle to default
		else if ImageFound(image:"WPO/dropDwonIcon",searchRectangle:(screenPartition().SUT.("CustomPart")))
			smartUtil.clickImagewithHotspot "WPO/dropDwonIcon",-150,-25,"CustomPart"
			Drag MouseLocation()
			Drop [1080,1000]
			TypeText backspace
			Typetext option
			typetext spacebar
		else if ImageFound(image:"WPO/textBar",searchRectangle:(screenPartition().SUT.("CustomPart")))
			--smartUtil.setCustomSearchRectangle"Dashboard",-80,100,2000,1800,"THTH"
			smartUtil.clickImagewithHotspot "WPO/textBar",-180,10,"CustomPart"
			Drag MouseLocation()
			Drop [1080,1000]
			TypeText backspace
			Typetext option
			typetext spacebar
		end if
		smartUtil.clickText"Setting Filter","TH"
	end repeat
end selectPreference



to errorValidationInConsole submenu
	--set remoteclipboard to empty
	wait 2
	set  the RemoteClipboard  to empty
	TypeText controlKey, shiftKey,J
	wait 3
	#Validating console page is opened
	smartUtil.validate "Console","topRightQuadrant"
	smartUtil.screenShot
	# Verify the console tab for errors after clicking on a Purchase Order. If any errors are displayed, consider it as a test failure.
	smartUtil.clickTextAtSpot"Console",50,30,"TRQ"
	smartUtil.textField"Error"
	TypeText return
	wait 2
	smartUtil.clickTextAtSpot"Console",-100,80,"TRQ"
	wait 4
	--click [1617,250]
	TypeText controlKey,"a"
	--wait 1
	TypeText controlKey,"c"
	--log RemoteClipboard()
	put  RemoteClipboard() into universal ConsoleMessage
	if universal ConsoleMessage is empty
		LogSuccess "There is no error present in the console tab"&&"of"&&submenu
		smartUtil.screenShot
		set the RemoteClipboard = ""
		insert submenu into universal noConsoleErrorMenus 
	else
		smartUtil.screenShot
		LogWarning "Encountered an error in the console"&&"of"&&submenu
		LogWarning"The Errors Present in the Console Window are"&&universal ConsoleMessage
		insert submenu into universal consoleErrorMenus
		set the RemoteClipboard = ""
	end if
	TypeText controlKey, shiftKey,i
	wait 3	
	#set search rectangle empty
	set the SearchRectangle to empty
	--log universal ConsoleMessage
	set the RemoteClipboard = ""
	if ImageFound(text:"Dashboard",searchRectangle:(screenPartition().UT.("THTH")))
		LogSuccess "After clicking on the"&& submenu&&"Application is in the"&&submenu&&"page So clicking on the Dashboard text for next validation"
		smartUtil.clickText"Dashboard","THTH"
	else
		LogSuccess "After clicking on the submenu Application is redirected to the Different Tab hence Closing the Tab for Next Validation "
	end if
end errorValidationInConsole



to archivalReportValidation listVar
	Repeat with each item folder of listVar
		if not ImageFound(text:"Archival_Report",searchRectangle:(screenPartition().SUT.("TH")), waitfor:1)
			LogError "Archival Reports Functionality is  not Working as Expected in the Application"
			Exit handler
		end if
		if not ImageFound(text:"Folder",searchRectangle:(screenPartition().SUT.("HM")),waitFor:1) and not ImageFound(text:"file",searchRectangle:(screenPartition().SUT.("HM")),waitFor:1)
			LogError"Folder is Empty"	
		end if
		smartUtil.setCustomSearchRectangle"Name",18,25,200,450,"HM"
		set  the TextStyle to {validWords:folder,dpi:144}
		if folder is "CH"
			set  the TextStyle to default
			click text:<not preceded by alphanumeric ,"CH", not followed by Space>,caseSensitive:on,searchRectangle:(screenPartition().SUT.("Custompart"))
			Click the RemoteScreenSize*.5 
		else
			smartUtil.clickText folder,"Custompart"
			Click the RemoteScreenSize*.5 
		end if
		set  the TextStyle to default
		
		if(ImageFound(text:"file",searchRectangle:(screenPartition().SUT.("HM")), waitfor:1))
			smartUtil.readTextUsingText"Name",18,25,500,450,"HM"
			split global currLocVal by newline
			LogSuccess "The File names are" &&global currLocVal
			LogSuccess"Archival Reports Functionality is Working as Expected in the Application"
		else
			smartUtil.readTextUsingText"Name",18,25,200,450,"HM"
			split global currLocVal by newline
			Log global currLocVal
			if global currLocVal is empty 
				LogError "The"&&folder&&"is empty"
			end if
			archivalReportValidation global currLocVal
		end if
		if ImageFound(image:"WPO/backClickArrow",searchRectangle:(screenPartition().SUT.("LHLH"))) then click FoundImageLocation()
	End repeat
end archivalReportValidation


