# Scenario:
# 1. Download the file
# 2. Navigate to "Download All Notification"
# 3. Click on "View Detail"
# 4. Verify that the downloaded file is available in the list on the download page

to downloadAllAndVerifyTheFileInListOfDownloads
	#Assigning supplierName 
	set supplierName to universal testData.supplier_Name
	#Assigning fileType 
	set fileType to universal testData.fileType
	#Validating Home page
	smartUtil.validate "Supply Chain Collaboration Portal"
	#clicking on the download all
	smartUtil.setTextstyle "DownloadAll"
	smartUtil.clickText "Download All","topRightQuadrant",dpi:144
	#Validating Choose Supplier to Download pop is appeared
	"SC2_CommonActions/sc2CommonHandlers".getTS "white"
	smartUtil.validate "Download","Center"
	"SC2_CommonActions/sc2CommonHandlers".getTS "default"
	smartUtil.clickText "Select an Supplier","Center"
	#Validating and Selecting supplier name
	smartUtil.validate supplierName,"Center"
	smartUtil.clickText supplierName,"Center"
	smartUtil.validate "Select an Filetype","Center"
	smartUtil.clickText "Select an Filetype","Center"
	#Validating and Selecting supplier type
	smartUtil.validate fileType,"Center"
	smartUtil.clickText fileType,"Center"
	#Clicking on download
	smartUtil.clickTextAtSpot "Cancel",150,0,"BH"
	#validating success pop up after click on download
	Try
		smartUtil.validateWithoutTry "File Processed Successfully","TH"
		smartUtil.validate "Download All Notification","BH"
		
	Catch 
		log "File processed pop up not showing in the UI.Hence moving for the next step "
		smartUtil.validate "Download All Notification","BH"
		
	End try
	#Capturing the current date and time in the system
	put formattedTime("[Mon] [D], [Year], [HR12]:[mi]",time) into currentDateAndTime
	put item 3 of currentDateAndTime  into onlyTime
	log onlyTime
	
	if  character 2 of onlyTime = 0 then 
		delete the first 2 characters of onlyTime
		log onlyTime
	end if
	
	#clicking on the Download All Notification
	smartUtil.clickTextAtSpot "Total Download All Notification",358,-77,"BH"
	wait 2
	#validating the Download All Notification page is opened
	smartUtil.validate "List of Downloaded Files","TH"
	
	#Selecting celestica
	smartUtil.clickText supplierName,"RH"
	
	# validating celestica is selected
	smartUtil.validate "Celestica","LH"
	
	#Capturing file downloaded time in UI
	put global currLocVal into fileDownloadedTimeInUI
	
	put fileDownloadedTimeInUI split by ":"  into var
	put item 1 of var into Tdate
	put item 2 of var into TYear
	delete last item of var
	put [Tdate,TYear] as a list into Reqformat
	put Reqformat joined with ":" into dateAndTimeInUI
	#Validating current date and time in the system and file downloaded time in UI
	assert currentDateAndTime contains onlyTime
	
	
end downloadAllAndVerifyTheFileInListOfDownloads


# Scenario:
#1.Checking application is able to access the underlying S3 bucket successfully
to verifyApplicationIsAbleToAccessTheUnderlyingS3Bucket

	#Validate and clicking on dashboard page
	smartUtil.validate "Dashboard","topLeftQuadrant"
	smartUtil.clickText "Dashboard","topLeftQuadrant"
	
	#Verifying and clicking on Archive files in the Dashboard
	smartUtil.validate "Archive Files","BH"
	smartUtil.clickTextAtSpot "Archive",358,-40,"BH"
	
	#Validating Archive files page is opened
	smartUtil.validate "Name","LH"
	wait until ImageFound(text:"Celestica",searchRectangle:(screenPartition().SUT.("HM")))
	wait 5
	#Read archival reports from UI
	set achiveReports to smartUtil.readTextUsingText ("Name", -10, 10, 200, 300)
	log achiveReports
	
	#Validating Archival reports contain Celestica or Jabil Or Venture in order check the application access the userlying S3 bucket
	if achiveReports contains "Celestica" or achiveReports contains "Jabil" or  achiveReports contains "Venture" then
		log "application is able to access the underlying S3 bucket successfully"
	else
		
		throw"Unable to access the application in underlying S3 bucket failed"
	end if
	
end verifyApplicationIsAbleToAccessTheUnderlyingS3Bucket


# Scenario: Validating errors in the console for various tiles.
to dashboardTileValidation

	try
		#Validate and clicking on dashboard page
		smartUtil.clickText "Dashboard","topLeftQuadrant"
		wait 2
		
		#Set search rectangle empty
		set the SearchRectangle to empty
		
		#Clicking on purchase order view details and verifying th purchasr order page is opened
		smartUtil.clickTextAtSpot "Purchase Orders",358,-40,"BH"
		smartUtil.validate "Purchase Orders","topLeftQuadrant"
		
		#Opening console tab
		TypeText controlKey, shiftKey,J
		wait 3
		#Validating console page is opened
		smartUtil.validate "Console", "topRightQuadrant"
		smartUtil.screenShot
		
		# Verify the console tab for errors after clicking on a Purchase Order. If any errors are displayed, consider it as a test failure.
		smartUtil.clickImagewithHotspot "icons/eyeIconForFilterInConsole",50,1,"topRightQuadrant"
		smartUtil.enterTextInTextField "Error"
		TypeText return
		wait 2
		smartUtil.setCustomSearchRectangle "console",-144,65,400,800,"RH"
		try
			assert that not  ImageFound(text:"Error", waitFor:20,searchRectangle:(screenPartition().SUT.("Custompart")))
		catch
			CaptureScreen {Name: universal screenshotPath&slash & the hour & the minute & the second && purchaseOrderError }
			insert "purchase Order" into global consoleError
		end try
		wait 2
		#closing console tab
		TypeText controlKey, shiftKey,i
		wait 3
		
		#set search rectangle empty
		set the SearchRectangle to empty
		
		# clicking on Dashboard
		smartUtil.clickText "Dashboard","topLeftQuadrant"
		wait 2
		#Set search rectangle empty
		set the SearchRectangle to empty
		
		#clicking on commmit percentage and validating the commit percentage page is opened
		smartUtil.clickTextAtSpot "Commit Percentage",358,-40,"BH"
		smartUtil.validate "Forecast Commit Percentage Pie Chart","topLeftQuadrant"
		
		#opening console tab
		TypeText controlKey, shiftKey,J
		wait 3
		
		#validating console tab is opened
		smartUtil.validate "Console", "topRightQuadrant"
		smartUtil.screenShot
		smartUtil.clickImagewithHotspot "icons/eyeIconForFilterInConsole",50,1,"topRightQuadrant"
		smartUtil.enterTextInTextField "Error"
		TypeText return
		smartUtil.setCustomSearchRectangle "console",-144,65,400,800,"RH"
		try
			assert that not  ImageFound(text:"Error", waitFor:20,searchRectangle:(screenPartition().SUT.("Custompart")))
		catch
			CaptureScreen {Name: universal screenshotPath&slash & the hour & the minute & the second &&dashboardError }
			insert "dashboard" into global consoleError
		end try
		#closing console tab
		TypeText controlKey, shiftKey,i
		wait 3
		#Set search rectangle empty
		set the SearchRectangle to empty
		smartUtil.clickText "Dashboard","topLeftQuadrant"
		wait 2
		#Set search rectangle empty
		set the SearchRectangle to empty
		smartUtil.clickTextAtSpot "Communication Notice",358,-40,"BH"
		smartUtil.validate "Communication Notice","topLeftQuadrant"
		TypeText controlKey, shiftKey,J
		wait 3
		smartUtil.validate "Console", "topRightQuadrant"
		smartUtil.screenShot
		# Verify the console tab for errors after clicking on a Purchase Order. If any errors are displayed, consider it as a test failure.
		smartUtil.clickImagewithHotspot "icons/eyeIconForFilterInConsole",50,1,"topRightQuadrant"
		smartUtil.enterTextInTextField "Error"
		TypeText return
		smartUtil.setCustomSearchRectangle "console",-144,65,400,800,"RH"
		try
			assert that not  ImageFound(text:"Error", waitFor:20,searchRectangle:(screenPartition().SUT.("Custompart")))
		catch
			CaptureScreen {Name: universal screenshotPath&slash & the hour & the minute & the second && communicationNoticeError }
			insert "communication Notice" into global consoleError
		end try
		#closing console tab
		TypeText controlKey, shiftKey,i
		wait 3
		if global consoleError is not empty then 
			logError "Errors Occured at"&&global consoleError
		end if
	Catch theException
		smartUtil.errorCapture theException
	End try	
end dashboardTileValidation


# Scenario:
# Set the preference in the application and verify selected prefrence is displaying in the
to setPreferences UserName
	set universal testData to item repeatIndex() of universal data
	set preference to universal testData.Preference
	set value to universal testData.Value
	#Validating and click on profile
	(*smartUtil.validate "Planning","topLeftQuadrant"
	smartUtil.clickTextAtSpot "Planning","1230","1","TH"*)
	smartUtil.validate UserName,"topRightQuadrant"
	smartUtil.clickTextAtSpot UserName,"-20","1","topRightQuadrant"
	#clicking on preference and Validating preference page is opened
	smartUtil.clickText "Preference","topRightQuadrant"
	smartUtil.validate "Setting Preference","topLeftQuadrant"
	set the TextStyle to {dpi:144}
	set preference to universal testData.Preference
	set value to universal testData.Value
	--log universal testData.Preference
	"SC2_CommonActions/sc2CommonHandlers".selectPreference preference,value
	smartUtil.setCustomSearchRectangle value,300,-50,1500,50,"LHLH"
	set the TextStyle to {dpi:144}
	if ImageFound(text:preference,searchRectangle:(screenPartition().SUT.("CustomPart")))
		LogSuccess "The preference"&&preference&&"is Selected in the Preference"
	else
		LogError  "The preference"&&preference&&"is Not Selected in the Preference"
	end if
	set the TextStyle to default
	ScrollWheelDown 3
	smartUtil.clickText "Update",
	#scrolling up the page
	TypeText homeKey
	TypeText pageUp
	TypeText pageUp
	#clicking on the forecast and commit
	smartUtil.clicktext " Forecast & Commit","TH"
	smartUtil.setCustomSearchRectangle "Forecast & commit", -50,10,200,300
	#validate and click on forecast
	smartUtil.validate "Forecast","Custompart"
	smartUtil.clickText "Forecast","Custompart"
	wait 10
	#validate supplier name and click on supplier
	smartUtil.clickUsingImage"icons/filterIcon","LHLH"
	--smartUtil.clickText "Supplier","TH"
	smartUtil.validate "Filters","TH"
	Repeat until ImageFound(text:universal testData.Value,searchRectangle:(screenPartition().SUT.("LHLH")))
		ScrollWheelDown 3
		if repeatindex()>10 then Exit repeat
	End repeat
	smartUtil.setCustomSearchRectangle value,300,-50,1500,50,"LHLH"
	if ImageFound(text:preference,searchRectangle:(screenPartition().SUT.("CustomPart")))
		LogSuccess "The preference"&&preference&&"is Updated in the Filters"
	else
		LogError  "The preference"&&preference&&"is Not Updated in the Fiters"
	end if
end setPreferences


# Verify the console tab for errors after clicking on a Menus. If any errors are displayed, test case will get fail
to validateAllMenus menu,subMenu

	#Set search rectangle empty
	set the SearchRectangle to empty
	#opening console tab
	TypeText controlKey, shiftKey,J
	#click on the forecast & commit
	smartUtil.clicktext menu,"TH"
	
	smartUtil.setCustomSearchRectangle menu, -50,10,200,300
	#click on the forecast
	smartUtil.validate subMenu,"Custompart"
	smartUtil.clickText subMenu,"Custompart"
	smartUtil.validate "Console", "topRightQuadrant"
	smartUtil.screenShot
	smartUtil.clickImagewithHotspot "icons/eyeIconForFilterInConsole",50,1,"topRightQuadrant"
	smartUtil.enterTextInTextField "Error"
	TypeText return
	wait 2
	# Verify the console tab for errors after clicking on submenu. if any error displays it will throw an error
	smartUtil.setCustomSearchRectangle "console",-144,65,400,800,"RH"
	try
		assert that not  ImageFound(text:"Error", waitFor:5,searchRectangle:(screenPartition().SUT.("Custompart")))
	catch
		CaptureScreen {Name: universal screenshotPath&slash & the hour & the minute & the second && purchaseOrderError }
		insert subMenu into global consoleError
	end try
	smartUtil.clickUsingImage"icons/refreshIconInconsoleTab", "topRightQuadrant"
	#closing the console tab
	TypeText controlKey, shiftKey,J
	If ImageFound(text:"Data not found",searchRectangle:(screenPartition().SUT.("HM")))
		smartUtil.clickText "Return to Dashboard"
	End If
	wait 1
end validateAllMenus